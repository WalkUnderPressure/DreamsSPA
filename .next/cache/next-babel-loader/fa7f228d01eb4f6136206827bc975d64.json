{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from \"react\";\n\nclass RedactForm extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleInputChange\", event => {\n      const value = event.target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      });\n    });\n\n    this.state = {\n      id: this.props.data.id,\n      codeName: this.props.data.codeName,\n      description: this.props.data.description,\n      date: this.props.data.date\n    };\n  }\n\n  render() {\n    const element = this.state;\n    return __jsx(\"form\", {\n      onSubmit: this.props.handleOnSubmit,\n      action: \"/api/redact\",\n      method: \"post\"\n    }, __jsx(\"h1\", null, \" ID : \", element.id), __jsx(\"input\", {\n      type: \"hidden\",\n      name: \"id\",\n      value: element.id\n    }), __jsx(\"input\", {\n      type: \"text\",\n      name: \"codeName\",\n      value: element.codeName,\n      onChange: this.handleInputChange\n    }), __jsx(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      value: element.description,\n      onChange: this.handleInputChange\n    }), __jsx(\"input\", {\n      type: \"text\",\n      name: \"date\",\n      value: element.date,\n      onChange: this.handleInputChange\n    }), __jsx(\"button\", {\n      onClick: this.handleSave\n    }, \"Save\"));\n  }\n\n}\n\nexport default RedactForm;","map":{"version":3,"sources":["/home/goldenteam/Desktop/Practice/Recipe/components/RedactForm/index.js"],"names":["Component","RedactForm","constructor","props","event","value","target","name","setState","state","id","data","codeName","description","date","render","element","handleOnSubmit","handleInputChange","handleSave"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAC/BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,+CAwBEC,KAAD,IAAW;AAC3B,YAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,YAAME,IAAI,GAAGH,KAAK,CAACE,MAAN,CAAaC,IAA1B;AACA,WAAKC,QAAL,CAAc;AACV,SAACD,IAAD,GAAQF;AADE,OAAd;AAGH,KA9BkB;;AAEf,SAAKI,KAAL,GAAa;AACTC,MAAAA,EAAE,EAAE,KAAKP,KAAL,CAAWQ,IAAX,CAAgBD,EADX;AAETE,MAAAA,QAAQ,EAAE,KAAKT,KAAL,CAAWQ,IAAX,CAAgBC,QAFjB;AAGTC,MAAAA,WAAW,EAAE,KAAKV,KAAL,CAAWQ,IAAX,CAAgBE,WAHpB;AAITC,MAAAA,IAAI,EAAE,KAAKX,KAAL,CAAWQ,IAAX,CAAgBG;AAJb,KAAb;AAMH;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAMC,OAAO,GAAG,KAAKP,KAArB;AACA,WACI;AAAM,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWc,cAA3B;AAA2C,MAAA,MAAM,EAAC,aAAlD;AAAgE,MAAA,MAAM,EAAC;AAAvE,OACI,4BAAWD,OAAO,CAACN,EAAnB,CADJ,EAEI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,IAA1B;AAA+B,MAAA,KAAK,EAAEM,OAAO,CAACN;AAA9C,MAFJ,EAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,KAAK,EAAEM,OAAO,CAACJ,QAAlD;AAA4D,MAAA,QAAQ,EAAE,KAAKM;AAA3E,MAHJ,EAII;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,aAAxB;AAAsC,MAAA,KAAK,EAAEF,OAAO,CAACH,WAArD;AAAkE,MAAA,QAAQ,EAAE,KAAKK;AAAjF,MAJJ,EAKI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,KAAK,EAAEF,OAAO,CAACF,IAA9C;AAAoD,MAAA,QAAQ,EAAE,KAAKI;AAAnE,MALJ,EAOI;AAAQ,MAAA,OAAO,EAAE,KAAKC;AAAtB,cAPJ,CADJ;AAWH;;AAvB8B;;AAkCnC,eAAelB,UAAf","sourcesContent":["import { Component } from \"react\";\n\nclass RedactForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.data.id,\n            codeName: this.props.data.codeName,\n            description: this.props.data.description,\n            date: this.props.data.date\n        }\n    }\n    render() {\n        const element = this.state;\n        return (\n            <form onSubmit={this.props.handleOnSubmit} action='/api/redact' method=\"post\">\n                <h1> ID : {element.id}</h1>\n                <input type=\"hidden\" name=\"id\" value={element.id} />\n                <input type=\"text\" name=\"codeName\" value={element.codeName} onChange={this.handleInputChange} />\n                <input type=\"text\" name=\"description\" value={element.description} onChange={this.handleInputChange} />\n                <input type=\"text\" name=\"date\" value={element.date} onChange={this.handleInputChange} />\n\n                <button onClick={this.handleSave}>Save</button>\n            </form>\n        )\n    }\n\n    handleInputChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        });\n    };\n}\n\nexport default RedactForm;"]},"metadata":{},"sourceType":"module"}